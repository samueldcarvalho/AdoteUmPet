// <auto-generated />
using System;
using AdoteUmPet.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace PetSavior.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("AdoteUmPet.Domain.Ads.Ad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdStatus")
                        .HasColumnType("int")
                        .HasColumnName("ad_status");

                    b.Property<int>("AdoptionStatus")
                        .HasColumnType("int")
                        .HasColumnName("adoption_status");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("pet_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ad");

                    b.HasIndex("AdoptionStatus")
                        .HasDatabaseName("ix_ad_adoption_status");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_ad_pet_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ad_user_id");

                    b.ToTable("ad");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Favorites.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<int>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("option_id");

                    b.Property<int>("OptionType")
                        .HasColumnType("int")
                        .HasColumnName("option_type");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_favorites");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_favorites_user_id");

                    b.ToTable("favorites");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<int>("BreedId")
                        .HasColumnType("int")
                        .HasColumnName("breed_id");

                    b.Property<string>("CareTip")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("care_tip");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Pedigree")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pedigree");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_pet");

                    b.HasIndex("BreedId")
                        .HasDatabaseName("ix_pet_breed_id");

                    b.HasIndex("Pedigree")
                        .HasDatabaseName("ix_pet_pedigree");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_pet_user_id");

                    b.HasIndex("Weight")
                        .HasDatabaseName("ix_pet_weight");

                    b.ToTable("pet");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.PetBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<string>("ArticleURL")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("article_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("group");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.HasKey("Id")
                        .HasName("pk_pet_breeds");

                    b.ToTable("pet_breeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ArticleURL = "",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bonzinho demais da conta sô",
                            Group = "Canidae",
                            Name = "Vira-lata",
                            Removed = false
                        });
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.PetTemperament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("pet_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<int>("TemperamentLevel")
                        .HasColumnType("int")
                        .HasColumnName("temperament_level");

                    b.Property<string>("TemperamentName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("temperament_name");

                    b.HasKey("Id")
                        .HasName("pk_pet_temperaments");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_temperaments_pet_id");

                    b.ToTable("pet_temperaments");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.PetVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("completed");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<int>("DosesRemaining")
                        .HasColumnType("int")
                        .HasColumnName("doses_remaining");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("pet_id");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.HasKey("Id")
                        .HasName("pk_pet_vaccines");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_vaccines_pet_id");

                    b.ToTable("pet_vaccines");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Ads.Ad", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Pets.Pet", "Pet")
                        .WithMany("Ads")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_ad_pets_pet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoteUmPet.Domain.Users.User", "User")
                        .WithMany("Ads")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ad_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Favorites.Favorite", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Users.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_favorites_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.Pet", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Pets.PetBreed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .HasConstraintName("fk_pet_pet_breeds_breed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoteUmPet.Domain.Users.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_pet_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.PetTemperament", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Pets.Pet", "Pet")
                        .WithMany("Temperaments")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_pet_temperaments_pets_pet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.PetVaccine", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Pets.Pet", "Pet")
                        .WithMany("Vaccines")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_pet_vaccines_pets_pet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdoteUmPet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AdoteUmPet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.Pet", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("Temperaments");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Pets.PetBreed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("AdoteUmPet.Domain.Users.User", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("Favorites");

                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
